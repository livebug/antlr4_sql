import antlr4
from antlr4.InputStream import InputStream
from antlr4.CommonTokenStream import CommonTokenStream
from antlr4.tree.Trees import Trees
from tdh.antlr4.HiveLexer import HiveLexer as SQLLexer
from tdh.antlr4.HiveParser import HiveParser as  SQLParser

# Assuming you have the SQL lexer and parser generated by ANTLR4

def parse_sql(sql):
    input_stream = InputStream(sql)
    lexer = SQLLexer(input_stream)
    token_stream = CommonTokenStream(lexer)
    parser = SQLParser(token_stream)
    tree = parser.statement()  # Assuming 'sql_stmt' is the entry point of your grammar
    return tree, parser

def extract_tables_and_columns(tree, parser):
    tables = []
    columns = []

    def recurse(node):
        if isinstance(node, parser.TableNameContext):
            tables.append(node.getText())
        elif isinstance(node, parser.ColumnNameContext):
            columns.append(node.getText())
        
        if hasattr(node, 'getChildren') and node.getChildCount() > 0:
            for child in node.getChildren():
                recurse(child)
        elif type(node) is antlr4.tree.Tree.TerminalNodeImpl:
            if node.getChildCount()>0:
                for i in range(node.getChildCount()): 
                    recurse(node.getChild(i))
        else:
            for child in node.getChild(0):
                recurse(child)

    recurse(tree)
    return tables, columns

def main():
    sql = "SELECT *,nvl(name,'') FROM users WHERE id = 1"
    tree, parser = parse_sql(sql) 

    # Extract table names and column names from the parse tree
    tables = []
    columns = []

    tables,columns = extract_tables_and_columns(tree,parser) 

    print("Tables:", tables)
    print("Columns:", columns)

if __name__ == "__main__":
    main()
