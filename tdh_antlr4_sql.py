import antlr4
from antlr4.InputStream import InputStream
from antlr4.CommonTokenStream import CommonTokenStream
from antlr4.tree.Trees import Trees
from tdh.antlr4.HiveLexer import HiveLexer as SQLLexer
from tdh.antlr4.HiveParser import HiveParser as  SQLParser
from tdh_antlr4_test import print_tree_like_linux, save_dot_file

# Assuming you have the SQL lexer and parser generated by ANTLR4

def parse_sql(sql):
    input_stream = InputStream(sql)
    lexer = SQLLexer(input_stream)
    token_stream = CommonTokenStream(lexer)
    parser = SQLParser(token_stream)
    tree = parser.statement()  # Assuming 'sql_stmt' is the entry point of your grammar
    return tree, parser

def extract_tables_and_columns(tree, parser):
    tables = []
    columns = []

    def recurse(node):
        print(node.getText(), type(node))
        if isinstance(node, parser.TableNameContext):
            tables.append(node.getText())
        elif isinstance(node, parser.ColumnNameContext):
            columns.append(node.getText())
        
        if hasattr(node, 'getChildren') and node.getChildCount() > 0:
            for child in node.getChildren():
                recurse(child)
        elif type(node) is antlr4.tree.Tree.TerminalNodeImpl:
            if node.getChildCount()>0:
                for i in range(node.getChildCount()): 
                    recurse(node.getChild(i))
        else:
            for child in node.getChild(0):
                recurse(child)

    recurse(tree)
    return tables, columns

    def replace_aliases_with_actual_names(sql, tables, columns):
        for table in tables:
            sql = sql.replace(table, f"actual_{table}")
        for column in columns:
            sql = sql.replace(column, f"actual_{column}")
        return sql

def extract_table_aliases(tree, parser):
    table_aliases = {}

    def recurse(node):
        print('extract_table_aliases',node.getText(), type(node))
        if isinstance(node, parser.TableSourceContext):
            alias = node.alias.getText()
            table_aliases[node.tabname.getText()] = alias

        if hasattr(node, 'getChildren') and node.getChildCount() > 0:
            for child in node.getChildren():
                recurse(child)
        elif type(node) is antlr4.tree.Tree.TerminalNodeImpl:
            if node.getChildCount()>0:
                for i in range(node.getChildCount()): 
                    recurse(node.getChild(i))
        else:
            for child in node.getChild(0):
                recurse(child)

    recurse(tree)
    return table_aliases


def main():
    sql = "SELECT *,nvl(name,'') FROM (select * from users u ) t WHERE t.id = 1"
    tree, parser = parse_sql(sql) 

    with open("output.txt", "w", encoding="utf8") as output_file:
        print_tree_like_linux(tree, parser, output_file=output_file)

    save_dot_file(tree, parser, "output.dot")

    # Extract table names and column names from the parse tree
    tables = []
    columns = []

    tables,columns = extract_tables_and_columns(tree,parser) 
    tableAlias = extract_table_aliases(tree,parser)
    print("Tables:", tables)
    print("Columns:", columns)
    print("Table Alias:", tableAlias)
    
if __name__ == "__main__":
    main()
