import antlr4
from antlr4.InputStream import InputStream
from antlr4.CommonTokenStream import CommonTokenStream
from antlr4.tree.Trees import Trees
from tdh.antlr4.HiveLexer import HiveLexer as SQLLexer
from tdh.antlr4.HiveParser import HiveParser as  SQLParser

# Assuming you have the SQL lexer and parser generated by ANTLR4

def parse_sql(sql):
    input_stream = InputStream(sql)
    lexer = SQLLexer(input_stream)
    token_stream = CommonTokenStream(lexer)
    parser = SQLParser(token_stream)
    tree = parser.statement()  # Assuming 'sql_stmt' is the entry point of your grammar

    return tree, parser

# Generate and print the tree diagram with indentation for better visualization
def print_tree(tree, parser, level=0):
    indent = "  " * level
    print(f"{indent}{Trees.getNodeText(tree, parser.ruleNames)}")
    for i in range(tree.getChildCount()):
        print_tree(tree.getChild(i), parser, level + 1)

# Generate and print the tree diagram with Linux-like tree command style and print to output file
def print_tree_like_linux(tree, parser, prefix="", is_last=True, output_file=None):
    connector = "└─ " if is_last else "├─ "
    line = f"{prefix}{connector}{Trees.getNodeText(tree, parser.ruleNames)}\n"
    if output_file:
        output_file.write(line)
    else:
        print(line, end="")
    prefix += "    " if is_last else "│   "
    child_count = tree.getChildCount()
    for i in range(child_count):
        is_last_child = (i == child_count - 1)
        print_tree_like_linux(tree.getChild(i), parser, prefix, is_last_child, output_file)

def generate_dot(tree, parser):
    def escape(s):
        return s.replace('"', '\\"')

    def node_id(node):
        return f"node{hash(node)}"

    def walk_tree(node, dot_lines):
        node_label = escape(Trees.getNodeText(node, parser.ruleNames))
        dot_lines.append(f'  {node_id(node)} [label="{node_label}"];')
        for i in range(node.getChildCount()):
            child = node.getChild(i)
            dot_lines.append(f'  {node_id(node)} -> {node_id(child)};')
            walk_tree(child, dot_lines)

    dot_lines = ["digraph G {"]
    walk_tree(tree, dot_lines)
    dot_lines.append("}")
    return "\n".join(dot_lines)

def save_dot_file(tree, parser, filename):
    dot_graph = generate_dot(tree, parser)
    with open(filename, "w", encoding='utf8') as file:
        file.write(dot_graph)

def main():
    sql = "SELECT *,nvl(name,'') FROM users WHERE id = 1"
    tree, parser = parse_sql(sql)
    with open("output.txt", "w", encoding='utf8') as output_file:
        print_tree_like_linux(tree, parser, output_file=output_file)
    
    save_dot_file(tree, parser, "output.dot")

if __name__ == "__main__":
    main()
